- https://www.geeksforgeeks.org/binary-search/?ref=lbp

# Problem: Given a sorted array arr[] of n elements,
 write a function to search a given element x in arr[] and return the index of x in the array.
                  Consider array is 0 base index.

# Linear Search Approach: A simple approach is to do a linear search.
 The time complexity of the Linear search is O(n).
  Another approach to perform the same task is using Binary Search.

# Binary Search Approach:

    - Binary Search is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half.
     The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(Log n).

# Binary Search Algorithm: The basic steps to perform Binary Search are:

    1.Begin with the mid element of the whole array as a search key.
    2.If the value of the search key is equal to the item then return an index of the search key.
    3.Or if the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half.
    4.Otherwise, narrow it to the upper half.
    5.Repeatedly check from the second point until the value is found or the interval is empty.


# Binary Search Algorithm can be implemented in the following two ways

    1.Iterative Method
    2.Recursive Method

1. Iteration Method

     binarySearch(array, x, low, high)
        repeat till low = high
               mid = (low + high)/2
                   if (x == array[mid])
                   return mid

                   else if (x > arr[mid]) // x is on the right side
                       low = mid + 1 // go to right side -> higher end

                   else                  // x is on the left side
                       high = mid - 1 // less go to left side -> lower end

2. Recursive Method (The recursive method follows the divide and conquers approach)

    binarySearch(array, x, low, high)
           if low > high
               return False

           else
               mid = (low + high) / 2
                   if x == array[mid]
                   return mid

               else if x > array[mid]        // x is on the right side
                   return binarySearch(arr, x, mid + 1 -> low, high)

               else                        // x is on the right side
                   return binarySearch(arr, x, low, mid - 1 -> high)







# Step-by-step Binary Search Algorithm: We basically ignore half of the elements just after one comparison.

    1.Compare x with the middle element.
    2.If x matches with the middle element, we return the mid index.
    3.Else If x is greater than the mid element, then x can only lie in the right half subarray after the mid element. So we recur for the right half.
    4.Else (x is smaller) recur for the left half.

Time Complexity: O(log n)



# Note: Here we are using

    int mid = low + (high – low)/2;

    Maybe, you wonder why we are calculating the middle index this way, we can simply add the lower and higher index and divide it by 2.
        int mid = (low + high)/2;
    But if we calculate the middle index like this means our code is not 100% correct, it contains bugs.

    That is, it fails for larger values of int variables low and high. Specifically, it fails if the sum of low and high is greater than the maximum positive int value(231 – 1 ).

    The sum overflows to a negative value and the value stays negative when divided by 2.

        In java, it throws ArrayIndexOutOfBoundException.











